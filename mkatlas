#!/bin/bash
#
# mkatlas
#
# v2.2 2013-04-25
#
# Build image atlases (sprites)
#
# Script dependencies: bash, ImageMagick (convert, identify)
# Optional dependencies: pngcrush jpgcrush
#

IFS=$'\n'

SCRIPTNAME=$(basename $0)

function usageexit {
	printf "usage: %s -o outfile [options] image [image2 ...]\n\n" $SCRIPTNAME >&2
	printf "   -n val       set the namespace (prefix) for all variables\n" >&2
	printf "   -r val       set the relative path to the image in the CSS\n" >&2
	printf "   -f #rrggbb   flatten the output with the specified background\n" >&2
	printf "   -q n         JPEG quality in percent\n" >&2
	printf "   -g filename  goatee metadata output\n" >&2
	printf "   -j filename  javascript metadata output\n" >&2
	printf "   -p           add no padding (danger!)\n" >&2

	printf "\n" >&2

	exit 1
}

function errorexit {
	msg=$1

	printf "%s: %s\n" $SCRIPTNAME $msg >&2

	exit 1
}

outfilename=""
prefix=""
relpath=""
flatcolor=""
images=""
quality=""
goateefile=""
javascriptfile=""
nopadding=0

# parse command line
while [ $# -gt 0 ]; do
	if [ "$1" = "-h" -o "$1" = "--help" ]; then
		usageexit

	elif [ "$1" = "-p" ]; then
		nopadding=1

	elif [ "$1" = "-n" ]; then
		shift
		if [ $# -lt 1 ]; then usageexit; fi
		prefix=$1

	elif [ "$1" = "-r" ]; then
		shift
		if [ $# -lt 1 ]; then usageexit; fi
		relpath=$1
	
	elif [ "$1" = "-o" ]; then
		shift
		if [ $# -lt 1 ]; then usageexit; fi
		outfilename=$1
	
	elif [ "$1" = "-f" ]; then
		shift
		if [ $# -lt 1 ]; then usageexit; fi
		flatcolor=$1"ff"

	elif [ "$1" = "-q" ]; then
		shift
		if [ $# -lt 1 ]; then usageexit; fi
		quality="$1"

	elif [ "$1" = "-g" ]; then
		shift
		if [ $# -lt 1 ]; then usageexit; fi
		goateefile="$1"
		exec {goateefp}>$goateefile
		if [ $? -ne 0 ]; then
			 errorexit "error opening $goateefile"
		fi

	elif [ "$1" = "-j" ]; then
		shift
		if [ $# -lt 1 ]; then usageexit; fi
		javascriptfile="$1"
		exec {jsfp}>$javascriptfile
		if [ $? -ne 0 ]; then
			 errorexit "error opening $javascriptfile"
		fi

	else
		images="$images"$'\n'"$1"
	fi

	shift
done

if [ "x$images" = "x" ]; then
	usageexit
fi

if [ "x$outfilename" = "x" ]; then
	usageexit
fi

# get the extension on the outfile type
outtype=$(printf "%s" ${outfilename##*.} | tr '[:upper:]' '[:lower:]')

# get all image offsets

pxpos=0
pypos=0
rowcount=0
maxheight=0
rowfiles=() # all the files that will be on this row
rowfile_new_width=()
rowfile_new_height=()
imgnamelist=""

for i in $images; do
	imgname="$i"

	if [ "x$imgname" = "xBR" ]; then
		pxpos=0
		rowcount=$(($rowcount+1))
		pypos=$(($pypos+$maxheight))
		maxheight=0
		continue
	fi

	#bname=$(basename $imgname)
	imgnorm=${prefix}$(printf "%s" ${imgname%.*} | tr -cd '[:alnum:]' | tr '[a-z]' '[A-Z]')

	imgnamelist="$imgnamelist"$'\n'"$imgnorm"

	wh=$(identify -format "%w,%h" $imgname)

	w=${wh%,*} # height of actual image, unpadded
	h=${wh#*,}

	w12=$((($w+1)/2))  # +1 to round up
	h12=$((($h+1)/2))

	if [[ $nopadding -eq 1 ]]; then
		pwidth=$w
		pheight=$h
	else
		# add at least 1 px padding (bottom and right) to an even value:
		if [ $(($w%2)) -eq 0 ]; then
			pwidth=$(($w+2))
		else
			pwidth=$(($w+1))
		fi
		if [ $(($h%2)) -eq 0 ]; then
			pheight=$(($h+2))
		else
			pheight=$(($h+1))
		fi
	fi

	# pad the image
	pimgname="$SCRIPTNAME.tmp.$(basename $imgname).$$.png"
	convert -background none $imgname -extent ${pwidth}x${pheight} $pimgname

	# offsets after padding
	pxpos12=$(($pxpos/2))  # pos is always even due to padding
	pypos12=$(($pypos/2))

	if [ $pheight -gt $maxheight ]; then
		maxheight=$pheight
	fi

	# goatee output
	if [ "x$goateefp" != "x" ]; then
		printf "[[ %s = '%s' ]]\n" "${imgnorm}_FILENAME" $imgname >&$goateefp
		printf "[[ %s = '%s' ]]\n" "${imgnorm}_ATLAS" ${relpath}$(basename ${outfilename}) >&$goateefp

		printf "[[ %s = -%s ]]\n" "${imgnorm}_X" $pxpos >&$goateefp
		printf "[[ %s = -%s ]]\n" "${imgnorm}_Y" $pypos >&$goateefp
		printf "[[ %s = -%s ]]\n" "${imgnorm}_X12" $pxpos12 >&$goateefp
		printf "[[ %s = -%s ]]\n" "${imgnorm}_Y12" $pypos12 >&$goateefp
		printf "[[ %s = '-%spx -%spx; /* %s */' ]]\n" "${imgnorm}_XYCSS" $pxpos $pypos $imgname >&$goateefp
		printf "[[ %s = '-%spx -%spx; /* %s */' ]]\n" "${imgnorm}_XYCSS12" $pxpos12 $pypos12 $imgname >&$goateefp

		printf "[[ %s = %s ]]\n" "${imgnorm}_W" $w >&$goateefp
		printf "[[ %s = %s ]]\n" "${imgnorm}_H" $h >&$goateefp

		printf "[[ %s = %s ]]\n" "${imgnorm}_W12" $w12 >&$goateefp
		printf "[[ %s = %s ]]\n" "${imgnorm}_H12" $h12 >&$goateefp

		printf "\n" >&$goateefp
	fi

	# js output
	if [ "x$jsfp" != "x" ]; then
		printf "var %s = '%s';\n" "${imgnorm}_FILENAME" $imgname >&$jsfp
		printf "var %s = '%s';\n" "${imgnorm}_ATLAS" ${relpath}$(basename ${outfilename}) >&$jsfp

		printf "var %s = -%s;\n" "${imgnorm}_X" $pxpos >&$jsfp
		printf "var %s = -%s;\n" "${imgnorm}_Y" $pypos >&$jsfp
		printf "var %s = -%s;\n" "${imgnorm}_X12" $pxpos12 >&$jsfp
		printf "var %s = -%s;\n" "${imgnorm}_Y12" $pypos12 >&$jsfp

		printf "var %s = %s;\n" "${imgnorm}_W" $w >&$jsfp
		printf "var %s = %s;\n" "${imgnorm}_H" $h >&$jsfp

		printf "var %s = %s;\n" "${imgnorm}_W12" $w12 >&$jsfp
		printf "var %s = %s;\n" "${imgnorm}_H12" $h12 >&$jsfp

		printf "\n" >&$jsfp
	fi

	pxpos=$(($pxpos+$pwidth))

	rowfiles[$rowcount]="${rowfiles[$rowcount]}"$'\n'"$pimgname"
done

# output rows
tmpfile="$SCRIPTNAME.tmp.$$.png"
tmprowfiles=""
i=0
while [ $i -le $rowcount ]; do
	tmprowfile="$SCRIPTNAME.tmp.row${i}.$$.png"
	convert -background none -bordercolor none ${rowfiles[$i]} +append $tmprowfile
	tmprowfiles="$tmprowfiles"$'\n'"$tmprowfile"
	i=$(($i+1))
done

#output final
if [ "x$flatcolor" = "x" ]; then
	convert -background none $tmprowfiles -append $tmpfile
else
	convert -background $flatcolor $tmprowfiles -append -layers flatten $tmpfile
fi

# crush it
if [ "x$outtype" = "xpng" ]; then
	if which pngcrush > /dev/null 2>&1; then
		# this was causing pngcrush to strip the alpha channel??
		#pngcrush -q -reduce -blacken $tmpfile $outfilename > /dev/null
		pngcrush -q -blacken $tmpfile $outfilename > /dev/null
	else
		mv $tmpfile $outfilename
	fi
elif [ "x$outtype" = "xjpg" -o "x$outtype" = "xjpeg" ]; then
	if [ "x$quality" != "x" ]; then
		convert $tmpfile -quality $quality% $outfilename
	else
		convert $tmpfile $outfilename
	fi

	if which jpgcrush > /dev/null 2>&1; then
		jpgcrush $outfilename > /dev/null
	fi
fi

rm -f $tmpfile

# output final height
wh=$(identify -format "%w,%h" $outfilename)
w=${wh%,*}
h=${wh#*,}

resultheight12=$((($h+0)/2))  # +1 to round up
resultwidth12=$((($w+0)/2))

sheetname=$(basename $outfilename)
sheetnamenorm=${prefix}$(printf "%s" ${sheetname%.*} | tr -cd '[:alnum:]' | tr '[a-z]' '[A-Z]')

# goatee output
if [ "x$goateefp" != "x" ]; then
	printf "[[ %s = '%spx %spx;' ]]\n" "${sheetnamenorm}_BGCSS" $w $h >&$goateefp
	printf "[[ %s = '%spx %spx;' ]]\n" "${sheetnamenorm}_BGCSS12" $resultwidth12 $resultheight12 >&$goateefp

	printf "\n" >&$goateefp

	for i in $imgnamelist; do
		printf "[[ %s = '%spx %spx;' ]]\n" "${i}_BGCSS" $w $h >&$goateefp
		printf "[[ %s = '%spx %spx;' ]]\n" "${i}_BGCSS12" $resultwidth12 $resultheight12 >&$goateefp
	done
fi

# js output
if [ "x$jsfp" != "x" ]; then
	printf "var %s = %s;\n" "${sheetnamenorm}_BG_W" $w >&$jsfp
	printf "var %s = %s;\n" "${sheetnamenorm}_BG_H" $h >&$jsfp
	printf "var %s = %s;\n" "${sheetnamenorm}_BG_W12" $resultwidth12 >&$jsfp
	printf "var %s = %s;\n" "${sheetnamenorm}_BG_H12" $resultheight12 >&$jsfp

	printf "\n" >&$jsfp

	for i in $imgnamelist; do
		printf "var %s = %s;\n" "${i}_BG_W" $w >&$jsfp
		printf "var %s = %s;\n" "${i}_BG_H" $h >&$jsfp
		printf "var %s = %s;\n" "${i}_BG_W12" $resultwidth12 >&$jsfp
		printf "var %s = %s;\n" "${i}_BG_H12" $resultheight12 >&$jsfp
	done
fi

# remove old tmpfiles
rm -f $SCRIPTNAME.tmp*$$*

# close files
if [ "x$goateefp" != "x" ]; then exec {goateefp}>&-; fi
if [ "x$jsfp" != "x" ]; then exec {jsfp}>&-; fi

